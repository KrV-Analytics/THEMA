import numpy as np
import networx as nx
import kmapper as km


class Coal_Mapper:
    # TODO: Write doc string for this class

    def __init__(
        self,
        mapper_graph: dict,
        min_intersection: int = 1,
    ):
        self.graph_mapper = mapper_graph
        self.min_intersection = min_intersection

    # TODO: incorporate a KM 'Wrapper' to handle the computation

    def __repr__(self):
        return f"Coal_Mapper(min_intersection={self.min_intersection})"











 def kmapper_to_networkx(mapper_graph: dict, min_intersection: int = 1):
    """
    Convert a kmapper simplicial complex into a networkx graph.

    Parameters
    -----------
    mapper_graph: dict
        Output of Kepler Mapper, generated by map()

    min_intersection: int, default is 1
        Minimum intersection considered when computing the graph. An edge will be created only when the intersection between two nodes is greater than or equal to `min_intersection`

    Returns
    -----------
    G: nx.Graph()
        A networkx graph based on a Kepler Mapper simplicial complex. Nodes determined by clusters and edges based on `min_intersection`

    """

    nerve = km.GraphNerve(min_intersection)
    nodes = mapper_graph["nodes"]
    _, simplices = nerve.compute(nodes)
    edges = [edge for edge in simplices if len(edge) == 2]

    G = nx.Graph(nodes=nodes)
    G.add_edges_from(edges)

    return G

def connected_components(mapper_graph: dict, min_intersection: int = 1):
    """
    Parameters
    -----------
    mapper_graph: dict
        Output of Kepler Mapper, generated by map()

    min_intersection: int, default is 1
        Minimum intersection considered when computing the graph. An edge will be created only when the intersection between two nodes is greater than or equal to `min_intersection`

    Returns
    -----------
    components: list
        List of networkx graphs, the connected components of the Kepler Mapper simplicial complex when evaluateed with `min_intersection`.

    """

    G = kmapper_to_networkx(mapper_graph, min_intersection)
    components = [G.subgraph(c).copy() for c in nx.connected_components(G)]
    return components

def item_lookup(
    mapper_graph: dict,
    item: str,
    min_intersection: int = 1,
):
    """
    Parameters
    -----------
    mapper_graph: dict
        Output of km.KeplerMapper(),

    item: str
        identifier for `item` (one element within a given cluster) #TODO Need more info on how the coal data will work here

    min_intersection: int, default is 1
        Minimum intersection considered when computing the graph. An edge will be created only when the intersection between two nodes is greater than or equal to `min_intersection`

    Returns
    -----------

    clusters: dict
        A dict of clusters that contain `item`. Keys are cluster labels, and values are cluster items.
    subgraph: list
        A subgraph made up of the connected componnets generated by clusters

    """
    clusters = {}

    G = kmapper_to_networkx(mapper_graph, min_intersection)
    all_clusters = G.nodes()

    for cluster in all_clusters:
        elements = mapper_graph["nodes"][cluster]
        if item in elements:
            clusters[cluster] = elements

    subgraph_nodes = np.unique(
        [nx.node_connected_component(G, node) for node in clusters]
    )
    subgraph = G.subgraph(subgraph_nodes)

    return clusters, subgraph
