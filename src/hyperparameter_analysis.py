""" Use Ollivier Ricci curvature + TDA to analyze a set of Mappers generated by a hyperparameter grid search."""

import argparse
import sys
from gtda.diagrams import PairwiseDistance
from utils import (
    convert_to_gtda,
    get_diagrams,
    plot_dendrogram,
)

from sklearn.cluster import AgglomerativeClustering


def curvature_metric(metric="bottleneck"):
    keys, diagrams = get_diagrams()
    curvature_dgms = convert_to_gtda(diagrams.values())
    distance_metric = PairwiseDistance(metric=metric)
    distance_metric.fit(curvature_dgms)
    distances = distance_metric.transform(curvature_dgms)
    return keys, distances


# kernel based embedding


def cluster_hyperparams(metric="bottleneck", p_frac=0.25):
    keys, distances = curvature_metric(metric)
    model = AgglomerativeClustering(
        affinity="precomputed", linkage="single", compute_distances=True
    )
    model.fit(distances)
    keys = [key[:2] for key in keys]

    # What percentage of Labels do you want to visualize?
    p = int(p_frac * len(keys))
    return plot_dendrogram(model, keys, metric, truncate_mode="level", p=p)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-m",
        "--metric",
        type=str,
        default="bottleneck",
        help="Select metric (that is supported by Giotto) to compare persistence daigrams.",
    )

    parser.add_argument(
        "--p_frac",
        type=float,
        default=0.25,
        help="Fraction of Labels to see in dendrogram plot.",
    )

    args = parser.parse_args()
    this = sys.modules[__name__]

    cluster_hyperparams(p_frac=args.p_frac)
