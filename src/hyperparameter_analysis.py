""" Use Ollivier Ricci curvature + TDA to analyze a set of Mappers generated by a hyperparameter grid search."""

import argparse
import sys
from gtda.diagrams import PairwiseDistance
from utils import (
    convert_to_gtda,
    get_diagrams,
    plot_dendrogram,
)
import pickle
import os

from sklearn.cluster import AgglomerativeClustering


def curvature_metric(metric="bottleneck"):
    keys, diagrams = get_diagrams()
    curvature_dgms = convert_to_gtda(diagrams.values())
    distance_metric = PairwiseDistance(metric=metric)
    distance_metric.fit(curvature_dgms)
    distances = distance_metric.transform(curvature_dgms)

    return keys, distances


# kernel based embedding


def cluster_hyperparams(keys, distances, metric, p_frac=0.1):
    model = AgglomerativeClustering(
        affinity="precomputed", linkage="average", compute_distances=True
    )
    model.fit(distances)

    keys = [key[:2] for key in keys]

    # What percentage of Labels do you want to visualize?
    p = int(p_frac * len(keys))
    plot_dendrogram(model, keys, metric, truncate_mode="level", p=p)

    return model


cwd = os.path.dirname(__file__)

if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-m",
        "--metric",
        type=str,
        default="bottleneck",
        help="Select metric (that is supported by Giotto) to compare persistence daigrams.",
    )

    parser.add_argument(
        "--p_frac",
        type=float,
        default=0.25,
        help="Fraction of Labels to see in dendrogram plot.",
    )

    parser.add_argument(
        "-s",
        "--save_model",
        default=True,
        help="If True, save the clustering model and distances as pickle files.",
    )

    parser.add_argument(
        "-v",
        "--Verbose",
        default=False,
        action="store_true",
        help="If set, will print messages detailing computation and output.",
    )

    args = parser.parse_args()
    this = sys.modules[__name__]

    keys, distances = curvature_metric(args.metric)
    model = cluster_hyperparams(keys, distances, p_frac=args.p_frac, metric=args.metric)

    results = dict([(model, keys)])

    if args.save_model:

        distance_file = f"curvature_{args.metric}_pairwise_distances.pkl"
        model_file = f"curvature_{args.metric}_clustering_model.pkl"

        out_dir_message = f"{distance_file} and {model_file} successfully written."

        output_dir = os.path.join(cwd, "../outputs/hyper_parameter_search/")

        # Check if output directory already exists
        if os.path.isdir(output_dir):
            distance_file = os.path.join(output_dir, distance_file)
            model_file = os.path.join(output_dir, model_file)

        else:
            os.makedirs(output_dir, exist_ok=True)
            distance_file = os.path.join(output_dir, distance_file)
            model_file = os.path.join(output_dir, model_file)

        with open(distance_file, "wb") as handle:
            pickle.dump(distances, handle, protocol=pickle.HIGHEST_PROTOCOL)
        with open(model_file, "wb") as handle:
            pickle.dump(results, handle, protocol=pickle.HIGHEST_PROTOCOL)

        if args.Verbose:
            print("\n")
            print(
                "-------------------------------------------------------------------------------- \n\n"
            )
            print(f"{out_dir_message}")

            print(
                "\n\n -------------------------------------------------------------------------------- "
            )
